#
# This file defines CodePipeline, well, pipelines

<%
pipelines = CONFIG.fetch('code-pipeline', [])

CONFIG.fetch('orchestrations', []).each_with_index do |orchestration,index|
  if orchestration['type'] === 'static-website'
    pipelines << {
      'name'       => orchestration['name'],
      'repository' => orchestration['repository'],
      'branch'     => orchestration['branch'],
      'environment-variables'     => {
        'BUCKET_NAME'     => orchestration['name'],
        'DISTRIBUTION_ID' => "${aws_cloudfront_distribution.#{orchestration['name'].resourceify}.id}",
      },
    }
  end
end
%>

#
# Role and policy required by CodePipeline
###############################################################################

# https://www.terraform.io/docs/providers/aws/r/iam_role.html
resource "aws_iam_role" "codepipeline-role" {
  name = "<%= CONFIG['name'] %>-codepipeline-role"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "sts:AssumeRole"
      ],
      "Principal": {
        "Service": "codepipeline.amazonaws.com"
      },
      "Effect": "Allow"
    }
  ]
}
EOF
}

# https://www.terraform.io/docs/providers/aws/r/iam_role_policy.html
resource "aws_iam_role_policy" "codepipeline-policy" {
  name = "<%= CONFIG['name'] %>-codepipeline-policy"
  role = "${aws_iam_role.codepipeline-role.id}"

  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "codecommit:GetBranch",
        "codecommit:GetCommit",
        "codecommit:UploadArchive",
        "codecommit:GetUploadArchiveStatus",
        "s3:GetObject",
        "s3:GetObjectVersion",
        "s3:GetBucketVersioning",
        "s3:PutObject",
        "iam:PassRole",
        "codebuild:BatchGetBuilds",
        "codebuild:StartBuild",
        "sns:*",
        "sqs:*",
        "cloudwach:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
EOF
}

#
# Role and policy required by CodeBuild
###############################################################################

# https://www.terraform.io/docs/providers/aws/r/iam_role.html
resource "aws_iam_role" "codebuild-role" {
  name = "<%= CONFIG['name'] %>-codebuild-role"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "codebuild.amazonaws.com"
      },
      "Effect": "Allow"
    }
  ]
}
EOF
}

# https://www.terraform.io/docs/providers/aws/r/iam_role_policy.html
resource "aws_iam_role_policy" "codebuild-policy" {
  name = "<%= CONFIG['name'] %>-codebuild-policy"
  role = "${aws_iam_role.codebuild-role.id}"

  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "s3:ListBucket",
        "s3:PutObject",
        "s3:GetObject",
        "s3:GetObjectVersion",
        "s3:GetBucketVersioning",
        "s3:DeleteObject",
        "cloudfront:CreateInvalidation",
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "codebuild:*"
      ],
      "Resource": "*",
      "Effect": "Allow"
    }
  ]
}
EOF
}

#
# CodePipeline setups
###############################################################################

<% pipelines.each_with_index do |pipeline,index| %>
  # https://www.terraform.io/docs/providers/aws/r/codepipeline.html
  resource "aws_codepipeline" "<%= pipeline['name'].resourceify %>" {
    name     = "<%= pipeline['name'] %>"
    role_arn = "${aws_iam_role.codepipeline-role.arn}"

    artifact_store {
      location = "<%= CONFIG['artifacts-bucket'] %>"
      type     = "S3"
    }

    # https://www.terraform.io/docs/providers/aws/r/codepipeline.html#stage
    stage {
      name = "SourceStage"

      # https://www.terraform.io/docs/providers/aws/r/codepipeline.html#action
      action {
        name    = "SourceAction"
        version = "1"

        category = "Source"     # Source, Test, Build, Approval, Deploy, Invoke
        owner    = "AWS"        # AWS, Custom or ThirdParty
        provider = "CodeCommit" # https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#actions-valid-providers

        # owner    = "ThirdParty"
        # provider = "GitHub"

        output_artifacts = ["code"]

        # https://www.terraform.io/docs/providers/aws/r/codepipeline.html#configuration
        configuration = {
          # https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#structure-configuration-examples
          PollForSourceChanges = "true"
          RepositoryName       = "<%= pipeline['repository'] %>"
          BranchName           = "<%= pipeline['branch'] %>"

          # Owner                = "${var.github_username}"
          # OAuthToken           = "${var.github_token}"
          # Repo                 = "${var.github_repo}"
          # Branch               = "${var.github_branch}"
        }
      }
    }

    stage {
      name = "BuildStage"

      action {
        name    = "BuildAction"
        version = "1"

        category = "Build"
        owner    = "AWS"
        provider = "CodeBuild"

        input_artifacts  = ["code"]
        output_artifacts = ["build"]

        configuration = {
          ProjectName = "<%= pipeline['name'].resourceify %>-build"
        }
      }
    }

    stage {
      name = "TestStage"

      action {
        name    = "TestAction"
        version = "1"

        category = "Test"
        owner    = "AWS"
        provider = "CodeBuild"

        input_artifacts  = ["build"]
        output_artifacts = ["tested"]

        configuration = {
          ProjectName = "<%= pipeline['name'].resourceify %>-test"
        }
      }
    }

    stage {
      name = "DeployStage"

      action {
        name    = "DeployAction"
        version = "1"

        category = "Test" # Category 'Deploy' doesn't support the CodeBuild provider
        owner    = "AWS"
        provider = "CodeBuild"

        input_artifacts  = ["build"]
        output_artifacts = ["deployed"]

        configuration = {
          ProjectName = "<%= pipeline['name'].resourceify %>-deploy"
        }
      }
    }
  }

  # https://www.terraform.io/docs/providers/aws/r/codebuild_project.html
  resource "aws_codebuild_project" "<%= pipeline['name'].resourceify %>-test" {
    name          = "<%= pipeline['name'].resourceify %>-test"
    build_timeout = "30" # minutes, testing can take a long time
    service_role  = "${aws_iam_role.codebuild-role.arn}"

    # https://www.terraform.io/docs/providers/aws/r/codebuild_project.html#artifacts
    artifacts {
      type = "CODEPIPELINE"
    }

    # https://www.terraform.io/docs/providers/aws/r/codebuild_project.html#environment
    environment {
      type  = "LINUX_CONTAINER"            # LINUX_CONTAINER or WINDOWS_CONTAINER
      image = "aws/codebuild/standard:1.0" # https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html

      # https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html
      compute_type = "BUILD_GENERAL1_SMALL" # BUILD_GENERAL1_SMALL, BUILD_GENERAL1_MEDIUM or BUILD_GENERAL1_LARGE
    }

    # https://www.terraform.io/docs/providers/aws/r/codebuild_project.html#source
    source {
      type      = "CODEPIPELINE"
      buildspec = "testspec.yml"
    }
  }

  resource "aws_codebuild_project" "<%= pipeline['name'].resourceify %>-build" {
    name          = "<%= pipeline['name'].resourceify %>-build"
    build_timeout = "30"
    service_role  = "${aws_iam_role.codebuild-role.arn}"

    artifacts {
      type = "CODEPIPELINE"
    }

    environment {
      type  = "LINUX_CONTAINER"
      image = "aws/codebuild/standard:1.0"

      compute_type = "BUILD_GENERAL1_SMALL"
    }

    source {
      type      = "CODEPIPELINE"
      buildspec = "buildspec.yml"
    }
  }

  resource "aws_codebuild_project" "<%= pipeline['name'].resourceify %>-deploy" {
    name          = "<%= pipeline['name'].resourceify %>-deploy"
    build_timeout = "30"
    service_role  = "${aws_iam_role.codebuild-role.arn}"

    artifacts {
      type = "CODEPIPELINE"
    }

    environment {
      type  = "LINUX_CONTAINER"
      image = "aws/codebuild/standard:1.0"

      compute_type = "BUILD_GENERAL1_SMALL"

      <% pipeline.fetch('environment-variables', {}).each do |key,value| %>
        environment_variable {
          name  = "<%= key %>"
          value = "<%= value %>"
        }
      <% end %>
    }

    source {
      type      = "CODEPIPELINE"
      buildspec = "deployspec.yml"
    }
  }
<% end %>
